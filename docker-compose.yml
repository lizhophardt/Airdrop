version: '3.8'

services:
  airdrop-service:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - GNOSIS_RPC_URL=${GNOSIS_RPC_URL:-https://rpc.gnosischain.com}
      - ENCRYPTED_PRIVATE_KEY=${ENCRYPTED_PRIVATE_KEY}
      - ENCRYPTION_PASSWORD=${ENCRYPTION_PASSWORD}
      - PRIVATE_KEY=${PRIVATE_KEY}
      - SECRET_PREIMAGE=${SECRET_PREIMAGE}
      - SECRET_PREIMAGES=${SECRET_PREIMAGES}
      - AIRDROP_AMOUNT_WEI=${AIRDROP_AMOUNT_WEI:-1000000000000000000}
    restart: unless-stopped
    
    # Security Options
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined  # Can be restricted further with custom profile
      - apparmor:docker-default
    
    # Resource Limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    # Read-only root filesystem with writable volumes
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/tmp:noexec,nosuid,size=50m
    
    # Drop all capabilities and only add what's needed
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE  # Only needed if binding to privileged ports
    
    # User namespace remapping
    user: "1001:1001"
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/airdrop/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Writable volumes (read-only filesystem requires explicit writable mounts)
    volumes:
      - type: bind
        source: ./logs
        target: /app/logs
        bind:
          create_host_path: true
        read_only: false
      - type: bind
        source: ./data
        target: /app/data
        bind:
          create_host_path: true
        read_only: false
    
    networks:
      - airdrop-network
    
    # Logging configuration for security monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  airdrop-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: airdrop-br0
      com.docker.network.bridge.enable_icc: "false"  # Disable inter-container communication
      com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"  # Bind to localhost only
    ipam:
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1
